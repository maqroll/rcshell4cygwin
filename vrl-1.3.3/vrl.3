.\"
.\" $Id: vrl.3,v 1.4 1998/02/15 14:28:27 vons Exp $
.\"
.TH VRL 3 "" "vrl-1.3.3"
.SH NAME
vrl \- command-line editing library
.SH SYNOPSIS
.nf
char  *readline(prompt)
char  *prompt;
.sp
void  add_history(line)
char  *line;
.sp
int rl_reset_terminal(terminal_name)
char *terminal_name;
.fi
.SH DESCRIPTION
.PP
.B Vrl
is a library that allows an application to read a line from the terminal,
giving the user additional editing capabilities like cursor movement,
filename completion and command history.
.PP
It is a kind of a lightweight version of the GNU readline library,
having the necessary functions but smaller and faster (like Rick
Salz' editline library). It has been developed to work with the
rc-shell, but may be useful for other things as well.
.PP
.B readline()
will display the given prompt on the screen, and allows the user to
enter a line of text. When the user is done with it, the line will
be returned to the caller with the trailing newline removed. The caller
should free() the buffer afterward.  If the user generates an EOF,
NULL is returned.
.PP
.B add_history()
should be used to add commands to the history, readline() does not
do that itself.
.PP
Normally, the vrl library will check \fI$TERM\fP and \fI$TERMCAP\fP,
and reinitialise if either of them changes. If a shell does not update
these variables in its own environment, it should use
.B rl_reset_terminal()
to inform the vrl library about this.
.PP
The
.B vrl
library will catch SIGWINCH so that it is informed of window size
changes, and re-generates it just before it returns from readline().
The tty's \fIsusp\fP, \fIintr\fP and \fIquit\fP characters will
generate SIGTSTP, SIGINT, and SIGQUIT just before returning an
empty line to the caller.
.SH "EDITING COMMANDS"
.PP
The available commands are listed below:
.TP
.B ^A
Move to the start of the line
.TP
.B ^B
Move cursor backward
.TP
.B ^D
Delete char under cursor. If the line is empty and the previous character
typed was not a delete-char command, EOF is generated.
.TP
.B ^E
Move to the end of the line
.TP
.B ^F
Move cursor forward
.TP
.B ^H
Delete char left of cursor
.TP
.B ^I
Apply filename completion to the word under the cursor (^I is the [TAB] key)
.TP
.B ^J
Accept the line (^J usually corresponds to the [NEWLINE] or [ENTER] key)
.TP
.B ^K
Delete to the end of the line
.TP
.B ^L
Redisplay the line
.TP
.B ^M
Accept the line
.TP
.B ^N
Display next history line
.TP
.B ^O
Re-read the initialisation file
.TP
.B ^P
Display previous history line
.TP
.B ^R
Backward history search
.TP
.B ^T
Transpose chars
.TP
.B ^U
Kill the whole line
.TP
.B ^V
Insert next character as is, even if it is a command
.TP
.B ^W
Delete the word under the cursor
.TP
.B ^?
Delete char under the cursor (^? usually corresponds to the [DEL] key)
.TP
.BR ESC-ESC " or " ESC-?
List all possible completions without changing the command-line.
.TP
.B ESC-*
Replace the expression with all matching filenames.
.TP
.B ESC-v
Display the version of the vrl library on stdout
.PP
In addition to this, the following keypad and keyboard function keys
are recognised:
.TP
.B Left-arrow
Move cursor backward
.TP
.B Right-arrow
Move cursor forward
.TP
.B Up-arrow
Display previous history line
.TP
.B Down-arrow
Display next history line
.TP
.B Delete-key
Delete char under cursor
.TP
.B Backspace-key
Delete char left of cursor
.TP
.B Insert-key
Toggle insert/overwrite mode
.TP
.B Home-key
Move to the start of the line
.TP
.B End-key
Move to the end of the line
.PP
Lastly, the following special characters (as set with
.BR stty (1)
) are recognised. They are ignored if they happen to correspond to one
of the built-in command characters.
.TP
.B erase
Delete char left of cursor (usually ^H or ^?)
.TP
.B kill
Kill the whole line (usually ^U)
.TP
.B eof
Accept the line if it is not empty, EOF otherwise (usually ^D)
.TP
.B werase
Delete the word under the cursor (usually ^W)
.TP
.B lnext
Insert the next character as is (usually ^V)
.TP
.B reprint
Redisplay the line (usually ^R)
.TP
.B susp
Suspend the current process. Vrl will send a SIGTSTP to the application,
and readline() will return an empty line (usually ^Z)
.TP
.B intr
Interrupt the current process. Vrl will send a SIGINT to the application,
and readline() will return an empty line (usually ^C)
.TP
.B quit
Interrupt the current process. Vrl will send a SIGQUIT to the application,
and readline() will return an empty line (usually ^\e)
.SH "FILENAME COMPLETION"
.PP
The filename completion function acts on the text under the cursor. The
text may contain wildcards like '*' and '?', and environment variables
are expanded,
.PP
If the completion is unique, the text will be replaced by the filename.
If the completion is ambiguous, the text will be replaced by the common
prefix of all the possible completions. Whether they are listed is
controlled by the "completion" flag described below.
.SH "INITIALISATION FILE"
.PP
At startup, the
.B vrl
library will look for a file named
.B .vrlrc
in the user's home directory. This file should contain one keyword+value
pair per line, empty lines and lines starting with a '#' are ignored.
.PP
The '^O' command (see above) can be used to force vrl to re-read this file.
.PP
The following option keywords are recognised:
.TP
.BI "beep " "on " "| " "off"
If set to "\fIon\fP", vrl will beep when the requested operation is
impossible, setting it to "\fIoff\fP" silences it. Default is "\fIon\fP".
.TP
.BI "insertmode " "on " "| " "off"
If "\fIon\fP", characters typed will be inserted. If set to "\fIoff\fP",
new characters will overwrite the existing ones. Default is "\fIon\fP".
.TP
.BI "histmax " "<num>"
The maximum number of entries to store in the command history.
.TP
.BI "histmode " "all " "| " "norepeat " "| " "nodups"
This option defines how commands are added to the history. If set to
"\fIall\fP", every command is added without hesitation. When set
to "\fInorepeat\fP", a command is only added if it is different from the
previous one. Lastly, when it is set to "\fInodups\fP", the command is
added but all previous occurrences in the history are removed. Default
is "\fInorepeat\fP".
.TP
.BI "completion " "always " "| " "nochange " "| " "never"
This option defines what happens when a filename completion is ambiguous. If
set to "\fIalways\fP", all alternatives are listed automatically,
"\fInochange\fP" means that they are only listed when the filename to
complete didn't change (i.e. it didn't become longer), and setting it
to "\fInever\fP" means that nothing will be listed, ever. Default
is "\fInochange\fP".
.TP
.BI "ansicursorkeys " "on | off"
On some terminals (e.g. xterm), you can't type ahead with the cursor
keys since they don't generate the same sequence as when the keypad
is activated. The symptom is that instead of displaying the previous
command on cursor-up, ^[[A is displayed. Setting this option to "\fIon\fP"
allows vrl to recognise ^[[A, ^[[B, ^[[C, and ^[[D as alternatives for
cursor-up, -down, -right, and -left, which makes type-ahead possible on
a number of terminals (e.g. xterm, vt100, ...). Default is "\fIon\fP".
.SH "FILES"
.B $HOME/.vrlrc
The user's personal initialisation file
.SH "SEE ALSO"
.PP
editline(3), readline(3)
.SH "AUTHOR"
.PP
Gert-Jan Vons <vons@usa.net>
