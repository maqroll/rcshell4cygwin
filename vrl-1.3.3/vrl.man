


VRL(3)                                                     VRL(3)


NNAAMMEE
       vrl - command-line editing library

SSYYNNOOPPSSIISS
       char  *readline(prompt)
       char  *prompt;

       void  add_history(line)
       char  *line;

       int rl_reset_terminal(terminal_name)
       char *terminal_name;

DDEESSCCRRIIPPTTIIOONN
       VVrrll is a library that allows an application to read a line
       from the terminal,  giving  the  user  additional  editing
       capabilities like cursor movement, filename completion and
       command history.

       It is a kind of a lightweight version of the GNU  readline
       library,  having  the  necessary functions but smaller and
       faster (like Rick Salz' editline  library).  It  has  been
       developed to work with the rc-shell, but may be useful for
       other things as well.

       rreeaaddlliinnee(()) will display the given prompt  on  the  screen,
       and allows the user to enter a line of text. When the user
       is done with it, the line will be returned to  the  caller
       with  the  trailing  newline  removed.  The  caller should
       free() the buffer afterward.  If  the  user  generates  an
       EOF, NULL is returned.

       aadddd__hhiissttoorryy(())  should  be used to add commands to the his-
       tory, readline() does not do that itself.

       Normally, the vrl library will check _$_T_E_R_M  and  _$_T_E_R_M_C_A_P,
       and  reinitialise  if  either  of them changes. If a shell
       does not update these variables in its own environment, it
       should  use  rrll__rreesseett__tteerrmmiinnaall(()) to inform the vrl library
       about this.

       The vvrrll library will catch SIGWINCH so that it is informed
       of window size changes, and re-generates it just before it
       returns from readline().  The tty's _s_u_s_p,  _i_n_t_r  and  _q_u_i_t
       characters will generate SIGTSTP, SIGINT, and SIGQUIT just
       before returning an empty line to the caller.

EEDDIITTIINNGG CCOOMMMMAANNDDSS
       The available commands are listed below:

       ^^AA     Move to the start of the line

       ^^BB     Move cursor backward




vrl-1.3.3                                                       1





VRL(3)                                                     VRL(3)


       ^^DD     Delete char under cursor. If the line is empty  and
              the  previous character typed was not a delete-char
              command, EOF is generated.

       ^^EE     Move to the end of the line

       ^^FF     Move cursor forward

       ^^HH     Delete char left of cursor

       ^^II     Apply filename completion to  the  word  under  the
              cursor (^I is the [TAB] key)

       ^^JJ     Accept  the  line  (^J  usually  corresponds to the
              [NEWLINE] or [ENTER] key)

       ^^KK     Delete to the end of the line

       ^^LL     Redisplay the line

       ^^MM     Accept the line

       ^^NN     Display next history line

       ^^OO     Re-read the initialisation file

       ^^PP     Display previous history line

       ^^RR     Backward history search

       ^^TT     Transpose chars

       ^^UU     Kill the whole line

       ^^VV     Insert next character as is, even if it is  a  com-
              mand

       ^^WW     Delete the word under the cursor

       ^^??     Delete  char  under  the  cursor (^? usually corre-
              sponds to the [DEL] key)

       EESSCC--EESSCC or EESSCC--??
              List all possible completions without changing  the
              command-line.

       EESSCC--**  Replace the expression with all matching filenames.

       EESSCC--vv  Display the version of the vrl library on stdout

       In addition to this, the  following  keypad  and  keyboard
       function keys are recognised:





vrl-1.3.3                                                       2





VRL(3)                                                     VRL(3)


       LLeefftt--aarrrrooww
              Move cursor backward

       RRiigghhtt--aarrrrooww
              Move cursor forward

       UUpp--aarrrrooww
              Display previous history line

       DDoowwnn--aarrrrooww
              Display next history line

       DDeelleettee--kkeeyy
              Delete char under cursor

       BBaacckkssppaaccee--kkeeyy
              Delete char left of cursor

       IInnsseerrtt--kkeeyy
              Toggle insert/overwrite mode

       HHoommee--kkeeyy
              Move to the start of the line

       EEnndd--kkeeyy
              Move to the end of the line

       Lastly,  the  following  special  characters  (as set with
       ssttttyy(1) ) are recognised. They are ignored if they  happen
       to correspond to one of the built-in command characters.

       eerraassee  Delete char left of cursor (usually ^H or ^?)

       kkiillll   Kill the whole line (usually ^U)

       eeooff    Accept  the  line if it is not empty, EOF otherwise
              (usually ^D)

       wweerraassee Delete the word under the cursor (usually ^W)

       llnneexxtt  Insert the next character as is (usually ^V)

       rreepprriinntt
              Redisplay the line (usually ^R)

       ssuusspp   Suspend the current process. Vrl will send a  SIGT-
              STP  to the application, and readline() will return
              an empty line (usually ^Z)

       iinnttrr   Interrupt the current process. Vrl will send a SIG-
              INT  to the application, and readline() will return
              an empty line (usually ^C)

       qquuiitt   Interrupt the current  process.  Vrl  will  send  a



vrl-1.3.3                                                       3





VRL(3)                                                     VRL(3)


              SIGQUIT  to  the  application,  and readline() will
              return an empty line (usually ^\)

FFIILLEENNAAMMEE CCOOMMPPLLEETTIIOONN
       The filename completion function acts on  the  text  under
       the  cursor.  The  text may contain wildcards like '*' and
       '?', and environment variables are expanded,

       If the completion is unique, the text will be replaced  by
       the  filename.   If  the completion is ambiguous, the text
       will be replaced by the common prefix of all the  possible
       completions.  Whether they are listed is controlled by the
       "completion" flag described below.

IINNIITTIIAALLIISSAATTIIOONN FFIILLEE
       At startup, the vvrrll library will look  for  a  file  named
       ..vvrrllrrcc in the user's home directory. This file should con-
       tain one keyword+value pair  per  line,  empty  lines  and
       lines starting with a '#' are ignored.

       The  '^O'  command (see above) can be used to force vrl to
       re-read this file.

       The following option keywords are recognised:

       bbeeeepp _o_n || _o_f_f
              If set to "_o_n", vrl will beep  when  the  requested
              operation   is  impossible,  setting  it  to  "_o_f_f"
              silences it. Default is "_o_n".

       iinnsseerrttmmooddee _o_n || _o_f_f
              If "_o_n", characters typed will be inserted. If  set
              to  "_o_f_f", new characters will overwrite the exist-
              ing ones. Default is "_o_n".

       hhiissttmmaaxx _<_n_u_m_>
              The maximum number of entries to store in the  com-
              mand history.

       hhiissttmmooddee _a_l_l || _n_o_r_e_p_e_a_t || _n_o_d_u_p_s
              This  option  defines how commands are added to the
              history. If set to "_a_l_l", every  command  is  added
              without  hesitation. When set to "_n_o_r_e_p_e_a_t", a com-
              mand is only added if it is different from the pre-
              vious  one. Lastly, when it is set to "_n_o_d_u_p_s", the
              command is added but all  previous  occurrences  in
              the history are removed. Default is "_n_o_r_e_p_e_a_t".

       ccoommpplleettiioonn _a_l_w_a_y_s || _n_o_c_h_a_n_g_e || _n_e_v_e_r
              This  option  defines  what happens when a filename
              completion is ambiguous. If set  to  "_a_l_w_a_y_s",  all
              alternatives  are  listed automatically, "_n_o_c_h_a_n_g_e"
              means that they are only listed when  the  filename
              to  complete  didn't  change (i.e. it didn't become



vrl-1.3.3                                                       4





VRL(3)                                                     VRL(3)


              longer), and setting it to "_n_e_v_e_r" means that noth-
              ing will be listed, ever. Default is "_n_o_c_h_a_n_g_e".

       aannssiiccuurrssoorrkkeeyyss _o_n _| _o_f_f
              On  some  terminals  (e.g.  xterm),  you can't type
              ahead with the cursor keys since they don't  gener-
              ate  the  same sequence as when the keypad is acti-
              vated. The symptom is that  instead  of  displaying
              the  previous  command  on  cursor-up, ^[[A is dis-
              played. Setting this option to "_o_n" allows  vrl  to
              recognise  ^[[A,  ^[[B,  ^[[C, and ^[[D as alterna-
              tives for  cursor-up,  -down,  -right,  and  -left,
              which makes type-ahead possible on a number of ter-
              minals (e.g. xterm, vt100, ...). Default is "_o_n".

FFIILLEESS
       $$HHOOMMEE//..vvrrllrrcc The user's personal initialisation file

SSEEEE AALLSSOO
       editline(3), readline(3)

AAUUTTHHOORR
       Gert-Jan Vons <vons@usa.net>


































vrl-1.3.3                                                       5


